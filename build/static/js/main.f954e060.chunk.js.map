{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["$","jQuery","App","props","state","entries","range","currentScroll","currentUsage","todayUsage","options","chart","id","xaxis","categories","series","name","data","dataLabels","enabled","todayGaugeOptions","todayGaugeSeries","this","getEntries","window","on","e","setState","scrollY","location","reload","fetch","hostname","moment","valueOf","then","res","text","resData","JSON","parse","updateChartData","bind","periodStartTime","periodEndTime","date","endOf","isBefore","startOf","add","subtract","daysUntilPeriodEnd","diff","todayStartTime","todayDataPartition","_","partition","o","time","prevTodayData","todayData","periodData","prevPeriodData","dataSet","filter","isSameOrAfter","lastUsagePrevToday","parseFloat","last","usage","lastUsagePrevPeriod","currentUsageThisPeriod","toFixed","remainingDailyDataThisPeriod","currentUsageToday","timeData","map","usageSeries","v","gaugeColorMap","interpolate","timeLabels","format","type","offsetY","sparkline","plotOptions","radialBar","startAngle","endAngle","track","background","strokeWidth","margin","show","value","grid","padding","top","fill","colors","className","height","join","onClick","setRange","toolbar","React","Component","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f954e060.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport _ from 'lodash';\nimport 'moment';\nimport moment from 'moment';\nimport Chart from 'react-apexcharts'\nimport interpolate from 'color-interpolate'\nimport jQuery from 'jquery';\nconst $ = jQuery;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      entries: [],\n      range:'today',\n      currentScroll:0,\n      currentUsage:'',\n      todayUsage:'',\n      options: {\n        chart: {\n          id: 'data-usage'\n        },\n        xaxis: {\n          categories: []\n        }\n      },\n      series: [{\n        name: 'usage',\n        data: []\n      }],\n      dataLabels: {\n        enabled: false,\n      },\n      todayGaugeOptions:{},\n      todayGaugeSeries:[]\n    };\n  }\n\n  componentWillMount() {\n      this.getEntries();\n  }\n  componentDidMount(){\n    $(window).on('scroll', (e)=>{\n      this.setState({currentScroll:window.scrollY})\n    })\n    $(window).on('touchend', (e)=>{\n      this.setState({currentScroll:window.scrollY})\n      if(this.state.currentScroll<-65){\n        \n        window.location.reload();\n      }\n    })\n  }\n  getEntries() {\n    fetch(\"http://\"+window.location.hostname+\":3901/api/all?timestamp=\"+ moment().valueOf())\n        .then(res => res.text())\n        .then(\n          (res) => {\n            const resData = JSON.parse(res);\n            this.setState({ entries: resData }, this.updateChartData.bind(this))\n     \n          } \n        );\n  }\n  updateChartData(){\n    let periodStartTime;\n    let periodEndTime;\n    if(moment().date(9).endOf('day').isBefore(moment())){\n      periodStartTime=moment().date(10).startOf('day')\n      periodEndTime=moment().date(10).add(1,'months').endOf('day')\n    }else{\n      periodStartTime=moment().date(10).subtract(1,'months').startOf('day')\n      periodEndTime=moment().date(10).endOf('day')\n    }\n    const daysUntilPeriodEnd = periodEndTime.diff(moment(),'days');\n    // console.log(moment().date(9).endOf('day').format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\n    // console.log(moment().format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\n    \n    const todayStartTime=moment().startOf('day');\n    const todayDataPartition = _.partition(this.state.entries, function(o) { \n      return moment(o.time).isBefore(todayStartTime);\n    });\n    const prevTodayData = todayDataPartition[0];\n    const todayData = todayDataPartition[1];    \n\n    const periodData = _.partition(this.state.entries, function(o) { \n      return moment(o.time).isBefore(periodStartTime);\n    });\n    const prevPeriodData = periodData[0];\n    const currentPeriodData = periodData[1];\n    // console.log(prevPeriodData);\n    let dataSet = currentPeriodData;\n    if(this.state.range=='last-hour'){\n      dataSet = _.filter(this.state.entries, function(o) { \n        return moment(o.time).isSameOrAfter(moment().subtract(1,'hour'));\n      });\n    }else if(this.state.range=='all'){\n      dataSet = this.state.entries;\n    }else if(this.state.range=='today'){\n      dataSet = todayData;\n    }\n\n    //console.log(dataSet);\n    const lastUsagePrevToday = parseFloat(_.last(prevTodayData).usage);\n    const lastUsagePrevPeriod = parseFloat(_.last(prevPeriodData).usage);\n    const currentUsageThisPeriod = (parseFloat(_.last(this.state.entries).usage)-lastUsagePrevPeriod).toFixed(2);\n    const remainingDataThisPeriod = 200-currentUsageThisPeriod;\n    const remainingDailyDataThisPeriod = (remainingDataThisPeriod/daysUntilPeriodEnd).toFixed(2);\n    const currentUsageToday = (parseFloat(_.last(this.state.entries).usage)-lastUsagePrevToday).toFixed(2);\n    const timeData = _.map(dataSet, 'time')\n    const usageData = _.map(dataSet, 'usage')\n    const usageSeries = usageData.map((v)=>{\n      return (parseFloat(v)-lastUsagePrevPeriod).toFixed(2)\n    })\n    let gaugeColorMap = interpolate(['#33e9ab','#67b244', '#E0B336','#fd9a2d', '#fd5f76']);\n    const timeLabels = timeData.map((v)=>{\n      return moment(v).format(\"dd M, h:mmA\");\n    })\n    this.setState({\n      currentUsage:currentUsageThisPeriod,\n      todayUsage:currentUsageToday,\n      remainingDailyDataThisPeriod:remainingDailyDataThisPeriod,\n      options:{\n        chart: {\n          id: 'data-usage'\n        },\n        xaxis: {\n          categories: timeLabels\n        },\n        dataLabels: {\n          enabled: false,\n        }\n      },\n      series:[{\n        name: 'usage',\n        data: usageSeries\n      }],\n\n          \n      todayGaugeSeries: [currentUsageToday/remainingDailyDataThisPeriod*100],\n      todayGaugeOptions: {\n        chart: {\n          type: 'radialBar',\n          offsetY: -20,\n          sparkline: {\n            enabled: true\n          },\n          \n        },  \n        plotOptions: {\n          radialBar: {\n            startAngle: -90,\n            endAngle: 90,\n            track: {\n              background: \"#e7e7e7\",\n              strokeWidth: '97%',\n              margin: 5, // margin is in pixels\n            },\n            dataLabels: {\n              name: {\n                show: false,\n              },\n              value: {\n                show: false,\n              }\n            }\n          }\n        },\n        grid: {\n          padding: {\n            top: -10\n          }\n        },\n        fill: {\n          colors: [gaugeColorMap(currentUsageToday/remainingDailyDataThisPeriod)]\n        },\n      },\n    })\n  }\n  setRange(range){\n    this.setState({range:range},this.updateChartData.bind(this));\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"ptr-status\">\n          Pull to reload\n        </div>\n        <div className=\"app-inner\">\n\n          \n          <header className=\"header\">\n            <div className=\"kpi\">\n              <div className=\"kpi-data\">\n                <div className=\"label\">Month's Usage</div>\n                <div className=\"number\">{this.state.currentUsage}<span className=\"unit\"> / 200GB</span></div>\n              </div>\n            </div>\n            <div className=\"kpi\">\n              <div className=\"meter\">\n                <Chart options={this.state.todayGaugeOptions} series={this.state.todayGaugeSeries} type=\"radialBar\" height=\"280\" />\n              </div>\n              <div className=\"kpi-data\">\n                <div className=\"label\">Today's Usage</div>\n      <div className=\"number\">{this.state.todayUsage}<span className=\"unit\"> / { this.state.remainingDailyDataThisPeriod}GB</span></div>\n              </div>\n            </div>\n          </header>\n          <div \n            className={['chart-panel',`range-${this.state.range}`].join(' ')}\n          >\n            <nav id=\"nav\">\n              <div className=\"nav-inner\">\n                <a className=\"nav-item nav-item-today\" onClick={this.setRange.bind(this,'today')}>Today</a>\n                <a className=\"nav-item nav-item-current-period\" onClick={this.setRange.bind(this,'current-period')}>This Month</a>\n                <a className=\"nav-item nav-item-last-hour\" onClick={this.setRange.bind(this,'last-hour')}>Last Hour</a>\n                <a className=\"nav-item nav-item-all\" onClick={this.setRange.bind(this,'all')}>All</a>\n              </div>\n            </nav>\n            <Chart options={this.state.options} toolbar={this.state.toolbar} series={this.state.series} type=\"area\" height=\"300\" />\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}