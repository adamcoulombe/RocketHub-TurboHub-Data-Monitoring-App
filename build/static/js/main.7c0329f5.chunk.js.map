{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["$","jQuery","App","props","state","currentData","resetsData","range","currentScroll","currentUsage","todayUsage","mainChart","options","chart","id","xaxis","categories","series","name","data","dataLabels","enabled","todayGaugeOptions","todayGaugeSeries","this","getData","window","on","e","setState","scrollY","location","reload","matchMedia","matches","addClass","document","documentElement","Promise","all","fetch","hostname","moment","valueOf","then","previousData","text","currentDataText","previousDataText","resetsDataText","JSON","parse","updateChartData","bind","catch","err","console","log","periodStartTime","periodEndTime","date","endOf","isBefore","startOf","add","subtract","daysUntilPeriodEnd","diff","todayStartTime","todayDataPartition","_","partition","o","time","prevTodayData","todayData","prevPeriodData","currentPeriodResets","filter","isAfter","dataSet","map","dataCorrected","each","reset","oUsageValue","parseFloat","usage","resetUsageValue","toFixed","isSameOrAfter","lastUsagePrevPeriod","last","lastUsagePrevToday","length","currentUsageThisPeriod","remainingDailyDataThisPeriod","currentUsageToday","timeData","usageSeries","v","gaugeColorMap","interpolate","timeLabels","format","type","offsetY","sparkline","plotOptions","radialBar","startAngle","endAngle","track","background","strokeWidth","margin","show","value","grid","padding","top","fill","colors","className","height","join","onClick","setRange","toolbar","React","Component","Boolean","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7c0329f5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.scss';\r\nimport _ from 'lodash';\r\nimport 'moment';\r\nimport moment from 'moment';\r\nimport Chart from 'react-apexcharts'\r\nimport interpolate from 'color-interpolate'\r\nimport jQuery from 'jquery';\r\nconst $ = jQuery;\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      currentData: [],\r\n      resetsData:[],\r\n      range:'today',\r\n      currentScroll:0,\r\n      currentUsage:'',\r\n      todayUsage:'',\r\n      mainChart:{\r\n        options: {\r\n          chart: {\r\n            id: 'data-usage'\r\n          },\r\n          xaxis: {\r\n            categories: []\r\n          }\r\n        },\r\n        series: [{\r\n          name: 'usage',\r\n          data: []\r\n        }],\r\n      },\r\n\r\n      dataLabels: {\r\n        enabled: false,\r\n      },\r\n      todayGaugeOptions:{},\r\n      todayGaugeSeries:[]\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n      this.getData();\r\n  }\r\n  componentDidMount(){\r\n    $(window).on('scroll', (e)=>{\r\n      this.setState({currentScroll:window.scrollY})\r\n    })\r\n    $(window).on('touchend', (e)=>{\r\n      this.setState({currentScroll:window.scrollY})\r\n      if(this.state.currentScroll<-65){\r\n        \r\n        window.location.reload();\r\n      }\r\n    });\r\n    if (window.matchMedia('(display-mode: standalone)').matches) {\r\n      $('html').addClass('is-pwa');\r\n    }\r\n    if (\"ontouchstart\" in document.documentElement) { \r\n      $('html').addClass('is-touch');\r\n    }else{\r\n      $('html').addClass('no-touch');\r\n    }\r\n  }\r\n  getData() {\r\n    // fetch(\"http://\"+window.location.hostname+\":3901/api/all?timestamp=\"+ moment().valueOf())\r\n    //     .then(res => res.text())\r\n    //     .then(\r\n    //       (res) => {\r\n    //         const resData = JSON.parse(res);\r\n    //         this.setState({ currentData: resData }, this.updateChartData.bind(this))\r\n     \r\n    //       } \r\n    //     );\r\n    Promise.all([\r\n      fetch(\"http://\"+window.location.hostname+\":3901/api/current?timestamp=\"+ moment().valueOf()),\r\n      fetch(\"http://\"+window.location.hostname+\":3901/api/previous?timestamp=\"+ moment().valueOf()),\r\n      fetch(\"http://\"+window.location.hostname+\":3901/api/resets?timestamp=\"+ moment().valueOf()),\r\n    ]).then(([currentData, previousData, resetsData]) => {\r\n      Promise.all([currentData.text(),previousData.text(),resetsData.text()]).then(([currentDataText,previousDataText,resetsDataText])=>{\r\n        this.setState({ \r\n          currentData: JSON.parse(currentDataText),\r\n          previousData: JSON.parse(previousDataText),\r\n          resetsData: JSON.parse(resetsDataText)\r\n        },\r\n      this.updateChartData.bind(this))\r\n      })\r\n\r\n\r\n    }).catch((err) => {\r\n        console.log(err);\r\n    });\r\n  }\r\n  updateChartData(){\r\n    let periodStartTime;\r\n    let periodEndTime;\r\n    if(moment().date(9).endOf('day').isBefore(moment())){\r\n      periodStartTime=moment().date(10).startOf('day')\r\n      periodEndTime=moment().date(10).add(1,'months').endOf('day')\r\n    }else{\r\n      periodStartTime=moment().date(10).subtract(1,'months').startOf('day')\r\n      periodEndTime=moment().date(10).endOf('day')\r\n    }\r\n    const daysUntilPeriodEnd = periodEndTime.diff(moment(),'days');\r\n    // console.log(moment().date(9).endOf('day').format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\r\n    // console.log(moment().format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\r\n    \r\n    const todayStartTime=moment().startOf('day');\r\n    const todayDataPartition = _.partition(this.state.currentData, function(o) { \r\n      console.log(moment(o.time).isBefore(todayStartTime));\r\n      return moment(o.time).isBefore(todayStartTime);\r\n    });\r\n    console.log(todayDataPartition);\r\n    const prevTodayData = todayDataPartition[0];\r\n    const todayData = todayDataPartition[1];    \r\n\r\n  \r\n    const prevPeriodData = this.state.previousData;\r\n    const resetsData = this.state.resetsData;\r\n    const currentPeriodResets = _.filter(resetsData, function(o) { \r\n      return moment(o.time).isAfter(periodStartTime);\r\n    });\r\n\r\n    const currentPeriodData = this.state.currentData.map( function(o){\r\n      if(!o.dataCorrected){\r\n        _.each(currentPeriodResets,(reset)=>{\r\n          if(moment(o.time).isAfter(reset.time)){\r\n            const oUsageValue = parseFloat(o.usage);\r\n            const resetUsageValue = parseFloat(reset.usage);\r\n            o.usage =  (oUsageValue+resetUsageValue).toFixed(2) + 'GB';\r\n          }\r\n        });\r\n      }\r\n      o.dataCorrected = true;\r\n      return o;      \r\n    });\r\n    // console.log(prevPeriodData);\r\n    let dataSet = currentPeriodData;\r\n    if(this.state.range=='last-hour'){\r\n      dataSet = _.filter(this.state.currentData, function(o) { \r\n        return moment(o.time).isSameOrAfter(moment().subtract(1,'hour'));\r\n      });\r\n    }else if(this.state.range=='all'){\r\n      dataSet = this.state.currentData;\r\n    }else if(this.state.range=='today'){\r\n      dataSet = todayData;\r\n    }\r\n\r\n    //console.log(dataSet);\r\n    const lastUsagePrevPeriod = parseFloat(_.last(prevPeriodData).usage);\r\n    const lastUsagePrevToday = prevTodayData.length>0 ? parseFloat(_.last(prevTodayData).usage) : lastUsagePrevPeriod;\r\n    const currentUsageThisPeriod = (parseFloat(_.last(this.state.currentData).usage)-lastUsagePrevPeriod).toFixed(2);\r\n    const remainingDataThisPeriod = 200-currentUsageThisPeriod;\r\n    const remainingDailyDataThisPeriod = (remainingDataThisPeriod/daysUntilPeriodEnd).toFixed(2);\r\n    const currentUsageToday = (parseFloat(_.last(this.state.currentData).usage)-lastUsagePrevToday).toFixed(2);\r\n    const timeData = _.map(dataSet, 'time')\r\n    const usageData = _.map(dataSet, 'usage')\r\n    const usageSeries = usageData.map((v)=>{\r\n      return (parseFloat(v)-lastUsagePrevPeriod).toFixed(2)\r\n    })\r\n    let gaugeColorMap = interpolate([\r\n      '#33e9ab','#33e9ab','#33e9ab',\r\n      '#67b244','#67b244','#67b244',\r\n      '#E0B336','#E0B336','#E0B336',\r\n      '#fd9a2d','#fd9a2d','#fd9a2d',\r\n      '#fd5f76','#fd5f76','#fd5f76',\r\n    ]);\r\n    const timeLabels = timeData.map((v)=>{\r\n      return moment(v).format(\"dd M, h:mmA\");\r\n    })\r\n    this.setState({\r\n      currentUsage:currentUsageThisPeriod,\r\n      todayUsage:currentUsageToday,\r\n      remainingDailyDataThisPeriod:remainingDailyDataThisPeriod,\r\n      mainChart:{\r\n        options:{\r\n          chart: {\r\n            id: 'data-usage'\r\n          },\r\n          xaxis: {\r\n            categories: timeLabels\r\n          },\r\n          dataLabels: {\r\n            enabled: false,\r\n          }\r\n        },\r\n        series:[{\r\n          name: 'usage',\r\n          data: usageSeries\r\n        }],\r\n      },\r\n\r\n\r\n          \r\n      todayGaugeSeries: [currentUsageToday/remainingDailyDataThisPeriod*100],\r\n      todayGaugeOptions: {\r\n        chart: {\r\n          type: 'radialBar',\r\n          offsetY: -20,\r\n          sparkline: {\r\n            enabled: true\r\n          },\r\n          \r\n        },  \r\n        plotOptions: {\r\n          radialBar: {\r\n            startAngle: -90,\r\n            endAngle: 90,\r\n            track: {\r\n              background: \"#e7e7e7\",\r\n              strokeWidth: '97%',\r\n              margin: 5, // margin is in pixels\r\n            },\r\n            dataLabels: {\r\n              name: {\r\n                show: false,\r\n              },\r\n              value: {\r\n                show: false,\r\n              }\r\n            }\r\n          }\r\n        },\r\n        grid: {\r\n          padding: {\r\n            top: -10\r\n          }\r\n        },\r\n        fill: {\r\n          colors: [gaugeColorMap(currentUsageToday/remainingDailyDataThisPeriod)]\r\n        },\r\n      },\r\n    })\r\n  }\r\n  setRange(range){\r\n    this.setState({range:range},this.updateChartData.bind(this));\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"ptr-status\">\r\n          Pull to reload\r\n        </div>\r\n        <div className=\"app-inner\">\r\n\r\n          \r\n          <header className=\"header\">\r\n            <div className=\"kpi\">\r\n              <div className=\"kpi-data\">\r\n                <div className=\"label\">Month's Usage</div>\r\n                <div className=\"number\">{this.state.currentUsage}<span className=\"unit\"> / 200GB</span></div>\r\n              </div>\r\n            </div>\r\n            <div className=\"kpi\">\r\n              <div className=\"meter\">\r\n                <Chart options={this.state.todayGaugeOptions} series={this.state.todayGaugeSeries} type=\"radialBar\" height=\"280\" />\r\n              </div>\r\n              <div className=\"kpi-data\">\r\n                <div className=\"label\">Today's Usage</div>\r\n      <div className=\"number\">{this.state.todayUsage}<span className=\"unit\"> / { this.state.remainingDailyDataThisPeriod}GB</span></div>\r\n              </div>\r\n            </div>\r\n          </header>\r\n          <div \r\n            className={['chart-panel',`range-${this.state.range}`].join(' ')}\r\n          >\r\n            <div className=\"nav-wrap\">\r\n              <nav id=\"nav\">\r\n                <div className=\"nav-inner\">\r\n                  <a className=\"nav-item nav-item-today\" onClick={this.setRange.bind(this,'today')}>Today</a>\r\n                  <a className=\"nav-item nav-item-current-period\" onClick={this.setRange.bind(this,'current-period')}>This Month</a>\r\n                  <a className=\"nav-item nav-item-last-hour\" onClick={this.setRange.bind(this,'last-hour')}>Last Hour</a>\r\n                  <a className=\"nav-item nav-item-all\" onClick={this.setRange.bind(this,'all')}>All</a>\r\n                </div>\r\n              </nav>              \r\n            </div>\r\n\r\n            <Chart options={this.state.mainChart.options} toolbar={this.state.toolbar} series={this.state.mainChart.series} type=\"area\" height=\"300\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}